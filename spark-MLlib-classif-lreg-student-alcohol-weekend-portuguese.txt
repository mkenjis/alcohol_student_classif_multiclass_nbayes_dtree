---- Feature extraction & Data Munging --------------

val rdd = sc.textFile("student_alcohol/student-por.csv").map(x => x.split(","))

scala> rdd.first
res1: Array[String] = Array(GP, F, 18, U, GT3, A, 4, 4, at_home, teacher, course, mother, 2, 2, 0, yes, no, no, no, yes, yes, no, no, 4, 3, 4, 1, 1, 3, 4, 0, 11, 11)

val categ_yesno = rdd.map(x => x(15)).distinct.zipWithIndex.collect.toMap
categ_yesno: scala.collection.immutable.Map[String,Long] = Map(yes -> 0, no -> 1)

val categ_sex = rdd.map(x => x(1)).distinct.zipWithIndex.collect.toMap
categ_sex: scala.collection.immutable.Map[String,Long] = Map(M -> 0, F -> 1)

val categ_address = rdd.map(x => x(3)).distinct.zipWithIndex.collect.toMap
categ_address: scala.collection.immutable.Map[String,Long] = Map(R -> 0, U -> 1)

val categ_famsize = rdd.map(x => x(4)).distinct.zipWithIndex.collect.toMap
cat_famsize: scala.collection.immutable.Map[String,Long] = Map(LE3 -> 0, GT3 -> 1)

val categ_pstatus = rdd.map(x => x(5)).distinct.zipWithIndex.collect.toMap
categ_pstatus: scala.collection.immutable.Map[String,Long] = Map(T -> 0, A -> 1)

val categ_mjob = rdd.map(x => x(8)).distinct.zipWithIndex.collect.toMap
categ_mjob: scala.collection.immutable.Map[String,Long] = Map(health -> 0, services -> 3, teacher -> 2, at_home -> 1, other -> 4)

val categ_fjob = rdd.map(x => x(9)).distinct.zipWithIndex.collect.toMap
categ_fjob: scala.collection.immutable.Map[String,Long] = Map(health -> 0, services -> 3, teacher -> 2, at_home -> 1, other -> 4)

val categ_reason = rdd.map(x => x(10)).distinct.zipWithIndex.collect.toMap
categ_reason: scala.collection.immutable.Map[String,Long] = Map(home -> 0, other -> 1, course -> 2, reputation -> 3)

val categ_guardian = rdd.map(x => x(11)).distinct.zipWithIndex.collect.toMap
categ_guardian: scala.collection.immutable.Map[String,Long] = Map(mother -> 0, father -> 1, other -> 2)

---- Conversion to 1-to-k binary encoding vectors 

def oneHotEncColumns(rddx: org.apache.spark.rdd.RDD[Array[String]], idx: Int):org.apache.spark.rdd.RDD[Array[Double]] = {
  val categories = rddx.map(r => r(idx)).distinct.zipWithIndex.collect.toMap
  val numCategories = categories.size
  val vetcateg = rddx.map(r => {
      val categoryIdx = categories(r(idx)).toInt
      val categoryFeatures = Array.ofDim[Double](numCategories)
      categoryFeatures(categoryIdx) = 1.0
      categoryFeatures
  })
  vetcateg
}

def mergeArray(rddx: org.apache.spark.rdd.RDD[Array[String]], idx: Int*):org.apache.spark.rdd.RDD[Array[Double]] = {
  var i = 0
  var arr1 = oneHotEncColumns(rddx,idx(i))
  for (j <- 1 until idx.size) {
    var arr2 = oneHotEncColumns(rddx,idx(j))
    var flt1 = arr1.zip(arr2).map(x => (x._1.toList ++ x._2.toList).toArray)
    arr1 = flt1
  }
  arr1
}

val concat = mergeArray(rdd,8,9,10,11)

concat.first
res1: Array[Double] = Array(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)

val rdd1 = rdd.map( x => { 
  val y = Array(categ_sex(x(1)),x(2),categ_address(x(3)),categ_famsize(x(4)),categ_pstatus(x(5)),x(6),x(7),x(12),x(13),x(14),categ_yesno(x(15)),categ_yesno(x(16)),categ_yesno(x(17)),categ_yesno(x(18)),categ_yesno(x(19)),categ_yesno(x(20)),categ_yesno(x(21)),categ_yesno(x(22)),x(23),x(24),x(25),x(28),x(29),x(30),x(31),x(32),x(27))
  y.map( z => z.toString.toDouble )
})
  
val vect = concat.zip(rdd1).map(x => (x._1.toList ++ x._2.toList).toArray)

vect.first
res3: Array[Double] = Array(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 18.0, 1.0, 1.0, 1.0, 4.0, 4.0, 2.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 4.0, 0.0, 11.0, 11.0, 1.0)

val rdd1_dt = rdd.map( x => { 
  val y = Array(categ_sex(x(1)),x(2),categ_address(x(3)),categ_famsize(x(4)),categ_pstatus(x(5)),x(6),x(7),categ_mjob(x(8)),categ_fjob(x(9)),categ_reason(x(10)),categ_guardian(x(11)),x(12),x(13),x(14),categ_yesno(x(15)),categ_yesno(x(16)),categ_yesno(x(17)),categ_yesno(x(18)),categ_yesno(x(19)),categ_yesno(x(20)),categ_yesno(x(21)),categ_yesno(x(22)),x(23),x(24),x(25),x(28),x(29),x(30),x(31),x(32),x(27))
  y.map( z => z.toString.toDouble )
})

import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

val data = vect.zip(rdd1_dt).map( x => {
   val x1 = x._1
   val l1 = x1(x1.size - 1) - 1
   val f1 = x1.slice(0,x1.size - 1)
   
   val x2 = x._2
   val l2 = x2(x2.size - 1) - 1
   val f2 = x2.slice(0,x2.size - 1)
   
   (LabeledPoint(l1,Vectors.dense(f1)),LabeledPoint(l2,Vectors.dense(f2)))
 })
 
val sets = data.randomSplit(Array(0.8,0.2))
val trainSet = sets(0).map( x => x._1)
val testSet = sets(1).map( x => x._1)

trainSet.cache

---- MLlib Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(trainSet)

val validPredicts =  testSet.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res6: Array[(Double, Double)] = Array((2.0,1.0), (3.0,2.0), (1.0,2.0), (3.0,4.0), (0.0,0.0), (0.0,0.0), (0.0,1.0), (3.0,3.0), (3.0,3.0), (0.0,4.0), (2.0,0.0), (2.0,2.0), (0.0,0.0), (0.0,0.0), (4.0,2.0), (0.0,2.0), (0.0,2.0), (0.0,2.0), (3.0,0.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 42
validPredicts.count                            // 124
val accuracy = metrics.accuracy   // 0.3387096774193548

metrics.confusionMatrix
res9: org.apache.spark.mllib.linalg.Matrix =
29.0  8.0  2.0  3.0  2.0
19.0  1.0  3.0  4.0  1.0
11.0  4.0  4.0  8.0  3.0
2.0   3.0  2.0  6.0  3.0
2.0   0.0  0.0  2.0  2.0

---- MLlib Naive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(trainSet)

val validPredicts =  testSet.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res10: Array[(Double, Double)] = Array((2.0,1.0), (2.0,2.0), (1.0,2.0), (0.0,4.0), (0.0,0.0), (0.0,0.0), (4.0,1.0), (1.0,3.0), (3.0,3.0), (0.0,4.0), (0.0,0.0), (0.0,2.0), (0.0,0.0), (0.0,0.0), (0.0,2.0), (0.0,2.0), (0.0,2.0), (0.0,2.0), (3.0,0.0), (1.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 42
validPredicts.count                            // 124
val accuracy = metrics.accuracy   // 0.3387096774193548

metrics.confusionMatrix
res13: org.apache.spark.mllib.linalg.Matrix =
35.0  4.0  1.0  2.0  2.0
21.0  2.0  2.0  1.0  2.0
15.0  5.0  2.0  3.0  5.0
3.0   4.0  0.0  2.0  7.0
4.0   0.0  0.0  1.0  1.0

---- Analyzing statistics for standardization ---------------------

import org.apache.spark.mllib.linalg.Matrix
import org.apache.spark.mllib.linalg.distributed.RowMatrix

val vectors = trainSet.map{ case LabeledPoint(x,y) => y }
val matrix = new RowMatrix(vectors)
val matrixSummary = matrix.computeColumnSummaryStatistics()

matrixSummary.max
res14: org.apache.spark.mllib.linalg.Vector = [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,22.0,1.0,1.0,1.0,4.0,4.0,4.0,4.0,3.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,5.0,5.0,5.0,5.0,32.0,18.0,19.0,19.0]

matrixSummary.min
res15: org.apache.spark.mllib.linalg.Vector = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0]

matrixSummary.mean
res16: org.apache.spark.mllib.linalg.Vector = [0.06857142857142857,0.21142857142857144,0.11428571428571428,0.21142857142857144,0.3942857142857143,0.03619047619047619,0.05523809523809524,0.05523809523809524,0.2704761904761905,0.5828571428571429,0.22857142857142856,0.11238095238095239,0.4380952380952381,0.22095238095238096,0.6952380952380952,0.2342857142857143,0.07047619047619047,0.5904761904761905,16.75809523809525,0.6838095238095238,0.700952380952381,0.12761904761904763,2.5219047619047608,2.299047619047619,1.565714285714286,1.9333333333333331,0.22285714285714292,0.9104761904761904,0.37142857142857144,0.9371428571428572,0.5085714285714286,0.1961904761904762,0.10285714285714286,0.22476190476190477,0.6247619047619047,3.9257142857142875,3.2057142857142833,3.2019047619047605,3.49904761904761...

matrixSummary.variance
res17: org.apache.spark.mllib.linalg.Vector = [0.06399127589967285,0.16704471101417667,0.1014176663031625,0.16704471101417667,0.2392802617230098,0.03494729189385678,0.05228644129407488,0.05228644129407488,0.1976953834969102,0.24359869138495094,0.1766630316248637,0.09994183933115232,0.24663758633224284,0.17246092330061796,0.2122864412940749,0.17973827699018538,0.06563431479462015,0.24227553616866593,1.5196146855688804,0.21662668120683387,0.2100181752090149,0.11154489276626682,1.2996146855688837,1.2214685568884043,0.5629443838604147,0.680661577608143,0.3643620501635769,0.08166484914576518,0.23391494002181024,0.0590185387131952,0.25040348964013087,0.1580007270083606,0.092453653217012,0.17457651762995274,0.23488186114140314,0.9620283533260635,1.0835550708833162,1.3675536168665938,2.12452199...

----- Decide to scale features because columns have different scales and then retrain the model 

import org.apache.spark.mllib.feature.StandardScaler
val scaler = new StandardScaler(true, true).fit(trainSet.map(x => x.features))
 
val trainScaled = trainSet.map(x => LabeledPoint(x.label,scaler.transform(x.features)))

---- MLlib Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(trainScaled)

val validPredicts =  testSet.map(p => (model.predict(scaler.transform(p.features)),p.label))

validPredicts.take(20)
res19: Array[(Double, Double)] = Array((2.0,1.0), (3.0,2.0), (1.0,2.0), (3.0,4.0), (0.0,0.0), (0.0,0.0), (0.0,1.0), (4.0,3.0), (3.0,3.0), (0.0,4.0), (2.0,0.0), (2.0,2.0), (1.0,0.0), (0.0,0.0), (4.0,2.0), (0.0,2.0), (0.0,2.0), (0.0,2.0), (3.0,0.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 36
validPredicts.count                            // 124
val accuracy = metrics.accuracy   // 0.2903225806451613

metrics.confusionMatrix
res22: org.apache.spark.mllib.linalg.Matrix =
23.0  10.0  4.0  3.0  4.0
13.0  2.0   5.0  6.0  2.0
9.0   3.0   4.0  8.0  6.0
1.0   1.0   2.0  6.0  6.0
1.0   0.0   1.0  3.0  1.0

---- Not helpful on standardizing. Using decision tree model to evaluate performance.

val trainSet = sets(0).map( x => x._2)
val testSet = sets(1).map( x => x._2)

trainSet.cache

import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel

val categoricalFeaturesInfo = Map[Int, Int](0->2, 2->2, 3->2, 4->2, 7->5, 8->5, 9->4, 10->3, 14->2, 15->2, 16->2, 17->2, 18->2, 19->2, 20->2, 21->2)

val model = DecisionTree.trainClassifier(trainSet, 5, categoricalFeaturesInfo, "gini", 30, 32)

model.toDebugString
res28: String =
"DecisionTreeModel classifier of depth 15 with 399 nodes
  If (feature 24 <= 3.5)
   If (feature 24 <= 2.5)
    If (feature 17 in {0.0})
     If (feature 1 <= 15.5)
      Predict: 0.0
     Else (feature 1 > 15.5)
      If (feature 8 in {1.0,0.0})
       Predict: 1.0
      Else (feature 8 not in {1.0,0.0})
       If (feature 25 <= 4.5)
        If (feature 11 <= 3.5)
         If (feature 22 <= 3.5)
          If (feature 15 in {0.0})
           Predict: 1.0
          Else (feature 15 not in {0.0})
           If (feature 7 in {1.0,2.0,3.0})
            Predict: 0.0
           Else (feature 7 not in {1.0,2.0,3.0})
            Predict: 2.0
         Else (feature 22 > 3.5)
          If (feature 9 in {1.0})
           Predict: 2.0
          Else (feature 9 not in {1.0})
        ...

val validPredicts = testSet.map(x => (model.predict(x.features),x.label))

validPredicts.take(20)
res24: Array[(Double, Double)] = Array((2.0,1.0), (4.0,2.0), (1.0,2.0), (1.0,4.0), (0.0,0.0), (1.0,0.0), (0.0,1.0), (1.0,3.0), (2.0,3.0), (4.0,4.0), (0.0,0.0), (1.0,2.0), (0.0,0.0), (1.0,0.0), (0.0,2.0), (0.0,2.0), (0.0,2.0), (3.0,2.0), (2.0,0.0), (2.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 43
validPredicts.count                            // 124
val accuracy = metrics.accuracy   // 0.3467741935483871

metrics.confusionMatrix
res27: org.apache.spark.mllib.linalg.Matrix =
20.0  12.0  8.0  3.0  1.0
10.0  9.0   7.0  1.0  1.0
10.0  6.0   8.0  5.0  1.0
2.0   5.0   4.0  3.0  2.0
1.0   1.0   1.0  0.0  3.0
